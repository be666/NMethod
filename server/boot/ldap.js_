/**
 * Created by bqxu on 16/3/10.
 */
var ldap = require('ldapjs');
var crypto = require('crypto');
var bunyan = require('bunyan');
var fs = require('fs');
var path = require('path');
var tools = require('../../tools');

function Server(server) {

  var baseDn = 'dc=syngentech,dc=org';

  server.bind(baseDn, function (req, res, next) {
    var LdapAdapter = tools.getModelByName('LdapAdapter');
    if (req.authentication != 'simple') {
      return next(new ldap.InappropriateAuthenticationError());
    }
    if (!req.credentials) {
      return next(new ldap.InvalidCredentialsError());
    }
    var credentials = req.credentials;
    var name = req.dn.toString();
    console.log("bind: " + req.name);
    if (/^cn=[A-Za-z0-9\.]+, ou=Users, dc=syngentech, dc=org$/.test(name)) {
      var loginName = /cn=[A-Za-z0-9\.]+,/.exec(name)[0];
      loginName = loginName.substring(3, loginName.length - 1)
      LdapAdapter.checkUser(loginName, function (err, authUser) {
        if (tools.ssha_check(credentials, authUser.pwd)) {
          res.end();
          return next()
        }
        return next(new ldap.InvalidCredentialsError());
      })
    } else {
      return next(new ldap.InvalidCredentialsError());
    }
  });

  server.search(baseDn, function (req, res, next) {
    var LdapAdapter = tools.getModelByName('LdapAdapter');
    var searchHandler = null;
    var filterStr = req.filter.toString();
    var searchParams = [];
    var temp = [];
    if (/^\(&\(uid=[A-Za-z0-9\.]+\)\(objectclass=posixaccount\)(\(uid=\*\))?\(&\(uidnumber=\*\)\(!\(uidnumber=0\)\)\)\)$/.test(filterStr)) {
      temp = /\(uid=[A-Za-z0-9\.]+\)/.exec(filterStr)[0];
      searchParams.push(temp.substring(5, temp.length - 1));
      searchHandler = LdapAdapter.searchUserByUid;
    } else if (/^\(&\(memberuid=[A-Za-z0-9\.]+\)\(objectclass=posixgroup\)(\(cn=\*\))?\(&\(gidnumber=*=\*\)\(!\(gidnumber=0\)\)\)\)$/.test(filterStr)) {
      temp = /\(memberuid=[A-Za-z0-9\.]+\)/.exec(filterStr)[0];
      searchParams.push(temp.substring(11, temp.length - 1));
      searchHandler = LdapAdapter.searchGroupByUid;
    } else if (/^\(&\(gidnumber=[A-Za-z0-9\.]+\)\(objectclass=posixgroup\)(\(cn=\*\))?\(&\(gidnumber=\*\)\(!\(gidnumber=0\)\)\)\)$/.test(filterStr)) {
      temp = /\(gidnumber=[A-Za-z0-9\.]+\)/.exec(filterStr)[0];
      searchParams.push(temp.substring(11, temp.length - 1));
      searchHandler = LdapAdapter.searchGroupByGid;
    } else {
      searchHandler = function (params, cb) {
        cb();
      }
    }
    searchHandler(searchParams, function (err, sobj) {
      if (sobj) {
        if (req.filter.matches(sobj.attributes)) {
          res.send(sobj);
        }
      } else {
      }
      res.end();
      return next();
    })
  });

  server.add(baseDn, function (req, res, next) {
    console.log('add:' + req.dn.toString());
    res.end();
    return next();
  });

  server.modify(baseDn, function (req, res, next) {
    console.log('modify:' + req.dn.toString());
    res.end();
    return next();
  });

  server.compare(baseDn, function (req, res, next) {
    console.log('compare:' + req.dn.toString());
    res.end();
    return next();
  });

  server.del(baseDn, function (req, res, next) {
    console.log('del:' + req.dn.toString());
    res.end();
  });


  server.compare(baseDn, function (req, res, next) {
    console.log('compare:' + req.dn.toString());
    res.end();
  });


  server.exop('1.3.6.1.4.1.4203.1.11.3', function (req, res, next) {
    res.value = 'anonymous';
    res.end();
    return next();
  });

  server.unbind(function (req, res, next) {
    console.log("unbind");
    res.end();
    next();
  });
}

module.exports = function (app) {


  var openssl = path.resolve(__dirname, '../../openssl');
  var serverTSL = ldap.createServer({
    log: bunyan.createLogger({name: 'ldap-js'}),
    certificate: fs.readFileSync(path.resolve(openssl, 'ldap.crt')),
    key: fs.readFileSync(path.resolve(openssl, 'ldap.key'))
  });

  Server(serverTSL);

  serverTSL.listen(1389, function () {
    console.log('LDAP server up at: %s', serverTSL.url);
  });
};

